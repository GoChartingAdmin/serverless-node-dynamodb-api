service: serverless-node-dynamodb-api

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs4.3
  stage: prod
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/items*"]]

custom:
  webpackIncludeModules: true
  dynamodb:
    start:
      port: ${env:DYNAMODB_PORT}
      inMemory: true
      migration: true
    migration:
      dir: ./migrations

functions:
  authorize:
    handler: handler.authorize

  getItems:
    handler: handler.getItems
    memory: 512
    timeout: 60
    events:
      - http:
          method: get
          path: items
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  getItem:
    handler: handler.getItem
    memory: 512
    timeout: 60
    events:
      - http:
          method: get
          path: items/{id}
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  createItem:
    handler: handler.createItem
    memory: 512
    timeout: 60
    events:
      - http:
          method: post
          path: items
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  updateItem:
    handler: handler.updateItem
    memory: 512
    timeout: 60
    events:
      - http:
          method: patch
          path: items/{id}
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  deleteItem:
    handler: handler.deleteItem
    memory: 512
    timeout: 60
    events:
      - http:
          method: delete
          path: items/{id}
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

resources:
  Resources:
    ItemsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "items"
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "userId"
          KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: "userId-index"
          KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
